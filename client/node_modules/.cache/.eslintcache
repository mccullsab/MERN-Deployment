[{"/Users/abbymcculloch/Documents/Coding Dojo/mern/full_stack_mern/mern_belt_exam/client/src/index.js":"1","/Users/abbymcculloch/Documents/Coding Dojo/mern/full_stack_mern/mern_belt_exam/client/src/App.js":"2","/Users/abbymcculloch/Documents/Coding Dojo/mern/full_stack_mern/mern_belt_exam/client/src/reportWebVitals.js":"3","/Users/abbymcculloch/Documents/Coding Dojo/mern/full_stack_mern/mern_belt_exam/client/src/views/CreatePage.jsx":"4","/Users/abbymcculloch/Documents/Coding Dojo/mern/full_stack_mern/mern_belt_exam/client/src/views/Dashboard.jsx":"5","/Users/abbymcculloch/Documents/Coding Dojo/mern/full_stack_mern/mern_belt_exam/client/src/views/UpdatePage.jsx":"6","/Users/abbymcculloch/Documents/Coding Dojo/mern/full_stack_mern/mern_belt_exam/client/src/views/DetailsPage.jsx":"7","/Users/abbymcculloch/Documents/Coding Dojo/mern/full_stack_mern/mern_belt_exam/client/src/components/StoreForm.jsx":"8","/Users/abbymcculloch/Documents/Coding Dojo/mern/full_stack_mern/mern_belt_exam/client/src/components/DeleteButton.jsx":"9"},{"size":627,"mtime":1679671610828,"results":"10","hashOfConfig":"11"},{"size":775,"mtime":1679674492762,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1679671019416,"results":"13","hashOfConfig":"11"},{"size":1624,"mtime":1679674017269,"results":"14","hashOfConfig":"11"},{"size":2623,"mtime":1679675717881,"results":"15","hashOfConfig":"11"},{"size":1884,"mtime":1679674041559,"results":"16","hashOfConfig":"11"},{"size":1135,"mtime":1679674736763,"results":"17","hashOfConfig":"11"},{"size":1625,"mtime":1679674903750,"results":"18","hashOfConfig":"11"},{"size":518,"mtime":1679674168341,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1taxsoz",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/abbymcculloch/Documents/Coding Dojo/mern/full_stack_mern/mern_belt_exam/client/src/index.js",[],[],"/Users/abbymcculloch/Documents/Coding Dojo/mern/full_stack_mern/mern_belt_exam/client/src/App.js",[],[],"/Users/abbymcculloch/Documents/Coding Dojo/mern/full_stack_mern/mern_belt_exam/client/src/reportWebVitals.js",[],[],"/Users/abbymcculloch/Documents/Coding Dojo/mern/full_stack_mern/mern_belt_exam/client/src/views/CreatePage.jsx",["52"],[],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link, useNavigate } from 'react-router-dom'\n\nimport StoreForm from '../components/StoreForm';\n\n\nconst CreatePage = () => {\n    const nav = useNavigate();\n    const [formErrors, setFormErrors] = useState([]);\n    const [storeList, setStoreList] = useState([])\n\n    const createStore = (newStore) => {\n        axios\n            .post('http://localhost:8000/api/stores', newStore)\n            .then((results) => {\n                console.log(results);\n                setStoreList([...storeList, results.data.store])\n                nav('/');\n            })\n            .catch((err) => {\n                console.log(err)\n                const errorResponse = err.response.data.error.errors\n                const errorArr = []\n                for (const key in errorResponse) {\n                    // console.log(errorResponse[key].message)\n                    errorArr.push(errorResponse[key].message)\n                    setFormErrors(errorArr);\n                }\n            })\n    };\n\n    return (\n        <div>\n            <div className=''>\n                <div className=''>\n                    <h2>Store Finder</h2>\n                    <Link to='/'>Go Back Home</Link>\n                </div>\n                <p>Add a new store!</p>\n                {storeList && <StoreForm useForm={createStore} store={{ name: '', open: 'false', number: 0 }} />}\n                {formErrors && formErrors.map((val, i) =>\n                    <p className='text-danger'>{val}</p>)}\n            </div>\n        </div>\n    )\n}\n\nexport default CreatePage;","/Users/abbymcculloch/Documents/Coding Dojo/mern/full_stack_mern/mern_belt_exam/client/src/views/Dashboard.jsx",["53"],[],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link, useNavigate } from 'react-router-dom'\nimport DeleteButton from '../components/DeleteButton';\n\n\nconst Dashboard = () => {\n    const nav = useNavigate();\n    const [storeList, setStoreList] = useState()\n\n    const removeFromDom = (storeToDelete) => {\n        setStoreList(storeList.filter((store) => store._id !== storeToDelete))\n    }\n\n    useEffect(() => {\n        axios.get('http://localhost:8000/api/stores')\n            .then((res) => {\n                setStoreList(res.data.store)\n                // check that we get the data before display\n                console.log(res)\n            })\n            .catch((err) => console.log(err));\n    }, [])\n\n    const sortedItems = () => {\n        const sortedCategory = [...storeList].sort((a, b) => {\n            if (a.number < b.number) {\n                return -1\n            }\n            if (a.number > b.number) {\n                return 1\n            }\n            return 0\n        }\n        )\n        setStoreList(sortedCategory)\n    }\n\n    return (\n        <div>\n            <table className='table'>\n                <tbody>\n                    <tr className='text-center'>\n                        <td className='font-weight-bold'>Name\n                        </td>\n                        <td className='font-weight-bold'>Number\n                            <button className='btn btn-secondary ml-3' onClick={sortedItems}>Sort</button>\n                        </td>\n                        <td className='font-weight-bold'>Open</td>\n                        <td className='font-weight-bold'>Remove</td>\n                    </tr>\n                    {storeList && storeList.map((store, indx) => (\n                        <tr key={indx} className='text-center'>\n                            <td><Link to={`/stores/${store._id}`}>{store.name}</Link></td>\n                            <td className='p-1'>{store.number}</td>\n                            <td className='p-1'>{store.open ? 'True' : 'False'}</td>\n                            <td className='align-middle'>\n                            {store.open ? <DeleteButton storeId={store._id} successCallback={() => removeFromDom(store._id)}/> :'' }\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n            <div className='d-flex'>\n                <button className='btn btn-success ml-5'><Link to='/stores/new' className='text-decoration-none'>Add a Store</Link></button>\n            </div>\n        </div>\n    )\n}\n\nexport default Dashboard;","/Users/abbymcculloch/Documents/Coding Dojo/mern/full_stack_mern/mern_belt_exam/client/src/views/UpdatePage.jsx",["54","55"],[],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useParams, useNavigate, Link } from 'react-router-dom'\n\nimport StoreForm from '../components/StoreForm';\n\nconst UpdatePage = () => {\n    const nav = useNavigate();\n    const { id } = useParams();\n    // removed the empty dictionary in oneStore state for image url to appear in \n    const [oneStore, setOneStore] = useState();\n    const [formErrors, setFormErrors] = useState([]);\n\n    useEffect(() => {\n        axios\n            .get(`http://localhost:8000/api/stores/${id}`)\n            .then((res) => {\n                const store = res.data.store\n                // console.log(res);\n                // for (var i=0; i < 1000000000; i++){\n                //     let x = i*i;\n                // }\n                setOneStore(store);\n            })\n            .catch((err) => console.log(err))\n    }, [])\n\n    const updateStore = (storeToUpdate) => {\n        axios\n            .put(`http://localhost:8000/api/stores/${id}`, storeToUpdate)\n            .then((results) => {\n                console.log(results)\n                nav(`/`);\n            })\n            .catch((err) => {\n                console.log(err)\n                const errorResponse = err.response.data.error.errors\n                const errorArr = []\n                for(const key in errorResponse){\n                    errorArr.push(errorResponse[key].message)\n                    setFormErrors(errorArr);\n                }\n            })\n    };\n\n\n    return (\n        <div>\n            <p>Edit this store:</p>\n            {/* { oneStore.title !== undefined && */}\n            {oneStore && <StoreForm useForm={updateStore} store={oneStore} />}\n            {formErrors && formErrors.map((val, i) => \n                <p className='text-danger'>{val}</p>)}\n            {/* } */}\n        </div>\n    )\n}\n\nexport default UpdatePage;","/Users/abbymcculloch/Documents/Coding Dojo/mern/full_stack_mern/mern_belt_exam/client/src/views/DetailsPage.jsx",["56","57","58"],[],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useParams, useNavigate, Link } from 'react-router-dom'\nimport DeleteButton from '../components/DeleteButton';\n\nconst DetailsPage = () => {\n    const [store, setStore] = useState()\n    const { id } = useParams();\n    const nav = useNavigate();\n\n    useEffect(() => {\n        axios\n            .get(`http://localhost:8000/api/stores/${id}`)\n            .then((res) => {\n                setStore(res.data.store)\n            })\n            .catch((err) => console.log(err))\n    }, [])\n\n    return(\n        <div>\n            {store && (\n                <div>\n                    <p>Name: {store.name}</p>\n                    <p>Store Number: {store.number}</p>\n                    <p>{store.open ? 'Open' : 'Closed'}</p>\n                    <br />\n                    <br />\n                    {/* <DeleteButton storeId = {store._id} successCallback={goBackToDashboard}/> */}\n                    <Link to={`/stores/${store._id}/edit`} >Edit Store Details</Link>\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default DetailsPage;","/Users/abbymcculloch/Documents/Coding Dojo/mern/full_stack_mern/mern_belt_exam/client/src/components/StoreForm.jsx",["59","60"],[],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst StoreForm = (props) => {\n    const [name, setName] = useState(props.store.name)\n    const [number, setNumber] = useState(props.store.number)\n    const [open, setOpen] = useState(props.store.open)\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        const storeInfo = {\n            name,\n            number,\n            open\n        };\n\n        props.useForm(storeInfo);\n    };\n\n    useEffect(() => {\n        setName(props.store.name);\n        setNumber(props.store.number);\n        setOpen(props.store.open);\n    }, [props.store._id])\n\n    return (\n            <form onSubmit={handleSubmit}>\n                <p>\n                    Name:\n                    <input\n                        type=\"text\"\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                    />\n                </p>\n                <p>\n                Number:\n                    <input\n                        type=\"number\"\n                        value={number}\n                        onChange={(e) => setNumber(e.target.value)}\n                    />\n                </p>\n                <p>\n                Open:\n                    <input\n                        type=\"checkbox\"\n                        value={open}\n                        onChange={(e) => setOpen(e.target.checked)}\n                    />\n                </p>\n                \n                <button className='btn btn-primary'>Submit</button>\n            </form >\n    )\n}\n\nexport default StoreForm;","/Users/abbymcculloch/Documents/Coding Dojo/mern/full_stack_mern/mern_belt_exam/client/src/components/DeleteButton.jsx",[],[],{"ruleId":"61","severity":1,"message":"62","line":1,"column":27,"nodeType":"63","messageId":"64","endLine":1,"endColumn":36},{"ruleId":"61","severity":1,"message":"65","line":8,"column":11,"nodeType":"63","messageId":"64","endLine":8,"endColumn":14},{"ruleId":"61","severity":1,"message":"66","line":3,"column":34,"nodeType":"63","messageId":"64","endLine":3,"endColumn":38},{"ruleId":"67","severity":1,"message":"68","line":26,"column":8,"nodeType":"69","endLine":26,"endColumn":10,"suggestions":"70"},{"ruleId":"61","severity":1,"message":"71","line":4,"column":8,"nodeType":"63","messageId":"64","endLine":4,"endColumn":20},{"ruleId":"61","severity":1,"message":"65","line":9,"column":11,"nodeType":"63","messageId":"64","endLine":9,"endColumn":14},{"ruleId":"67","severity":1,"message":"68","line":18,"column":8,"nodeType":"69","endLine":18,"endColumn":10,"suggestions":"72"},{"ruleId":"61","severity":1,"message":"66","line":2,"column":10,"nodeType":"63","messageId":"64","endLine":2,"endColumn":14},{"ruleId":"67","severity":1,"message":"73","line":25,"column":8,"nodeType":"69","endLine":25,"endColumn":25,"suggestions":"74"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'nav' is assigned a value but never used.","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["75"],"'DeleteButton' is defined but never used.",["76"],"React Hook useEffect has missing dependencies: 'props.store.name', 'props.store.number', and 'props.store.open'. Either include them or remove the dependency array. If 'setName' needs the current value of 'props.store.name', you can also switch to useReducer instead of useState and read 'props.store.name' in the reducer.",["77"],{"desc":"78","fix":"79"},{"desc":"78","fix":"80"},{"desc":"81","fix":"82"},"Update the dependencies array to be: [id]",{"range":"83","text":"84"},{"range":"85","text":"84"},"Update the dependencies array to be: [props.store._id, props.store.name, props.store.number, props.store.open]",{"range":"86","text":"87"},[891,893],"[id]",[565,567],[635,652],"[props.store._id, props.store.name, props.store.number, props.store.open]"]